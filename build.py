#!/usr/bin/env python3
"""
Script de construcci√≥ per PackAssist 3D
Automatitza la creaci√≥ de l'executable amb PyInstaller
"""
import os
import sys
import subprocess
import shutil
from pathlib import Path

def run_command(command, description):
    """Executa una comanda i mostra el resultat."""
    print(f"\nüîß {description}")
    print("-" * 50)
    
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        print(f"‚úÖ {description} completat")
        if result.stdout:
            print(result.stdout)
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error en {description}")
        print(f"Codi d'error: {e.returncode}")
        if e.stdout:
            print(f"Sortida: {e.stdout}")
        if e.stderr:
            print(f"Error: {e.stderr}")
        return False

def check_dependencies():
    """Verifica que totes les depend√®ncies estiguin instal¬∑lades."""
    print("üîç Verificant depend√®ncies...")
    
    try:
        import tkinter
        print("‚úÖ tkinter disponible")
    except ImportError:
        print("‚ùå tkinter no disponible")
        return False
    
    try:
        import PyInstaller
        print("‚úÖ PyInstaller disponible")
    except ImportError:
        print("‚ùå PyInstaller no disponible - instal¬∑lant...")
        if not run_command("pip install pyinstaller", "Instal¬∑laci√≥ de PyInstaller"):
            return False
    
    # Verificar m√≤duls locals
    try:
        from src.packassist.stp_loader import get_stp_dimensions
        from src.packassist.optimizer import optimize_packing
        print("‚úÖ M√≤duls PackAssist disponibles")
    except ImportError as e:
        print(f"‚ùå Error important m√≤duls PackAssist: {e}")
        return False
    
    return True

def create_pyinstaller_spec():
    """Crea l'arxiu .spec per PyInstaller."""
    spec_content = '''# -*- mode: python ; coding: utf-8 -*-

block_cipher = None

a = Analysis(
    ['app.py'],
    pathex=[],
    binaries=[],
    datas=[
        ('src', 'src'),
    ],
    hiddenimports=[
        'tkinter',
        'tkinter.ttk',
        'tkinter.filedialog',
        'tkinter.messagebox',
    ],
    hookspath=[],
    hooksconfig={},
    runtime_hooks=[],
    excludes=[],
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=block_cipher,
    noarchive=False,
)

pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

exe = EXE(
    pyz,
    a.scripts,
    a.binaries,
    a.zipfiles,
    a.datas,
    [],
    name='PackAssist3D',
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    upx_exclude=[],
    runtime_tmpdir=None,
    console=False,
    disable_windowed_traceback=False,
    argv_emulation=False,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
    icon=None,
)
'''
    
    with open('PackAssist3D.spec', 'w', encoding='utf-8') as f:
        f.write(spec_content)
    
    print("‚úÖ Fitxer .spec creat")

def build_executable():
    """Construeix l'executable."""
    print("\nüöÄ CONSTRUCCI√ì DE L'EXECUTABLE")
    print("=" * 50)
    
    # Verificar depend√®ncies
    if not check_dependencies():
        print("‚ùå Depend√®ncies no satisfetes")
        return False
    
    # Crear directori de construcci√≥ si no existeix
    os.makedirs("dist", exist_ok=True)
    
    # Crear fitxer .spec
    create_pyinstaller_spec()
    
    # Construir amb PyInstaller
    if not run_command("pyinstaller --clean PackAssist3D.spec", "Construcci√≥ amb PyInstaller"):
        return False
    
    # Verificar que l'executable s'ha creat
    exe_path = Path("dist/PackAssist3D.exe")
    if exe_path.exists():
        file_size = exe_path.stat().st_size / (1024 * 1024)  # MB
        print(f"‚úÖ Executable creat: {exe_path}")
        print(f"üìä Mida: {file_size:.1f} MB")
        
        # Crear directori d'exemple si no existeix
        example_dir = Path("dist/example_data")
        if not example_dir.exists():
            example_dir.mkdir()
            print("‚úÖ Directori d'exemple creat")
        
        return True
    else:
        print("‚ùå L'executable no s'ha creat correctament")
        return False

def cleanup():
    """Neteja fitxers temporals."""
    print("\nüßπ Netejant fitxers temporals...")
    
    temp_dirs = ["build", "__pycache__"]
    temp_files = ["PackAssist3D.spec"]
    
    for temp_dir in temp_dirs:
        if os.path.exists(temp_dir):
            shutil.rmtree(temp_dir)
            print(f"‚úÖ Eliminat: {temp_dir}")
    
    for temp_file in temp_files:
        if os.path.exists(temp_file):
            os.remove(temp_file)
            print(f"‚úÖ Eliminat: {temp_file}")

def main():
    """Funci√≥ principal del script de construcci√≥."""
    print("üéØ PACKASSIST 3D - SCRIPT DE CONSTRUCCI√ì")
    print("=" * 50)
    
    # Canviar al directori del script
    script_dir = Path(__file__).parent
    os.chdir(script_dir)
    
    try:
        # Construir executable
        if build_executable():
            print("\nüéâ CONSTRUCCI√ì COMPLETADA AMB √àXIT!")
            print("=" * 50)
            print("üìÅ L'executable es troba a: dist/PackAssist3D.exe")
            print("üí° Pots distribuir el fitxer executable de forma independent")
            
            # Preguntar si vol netejar
            response = input("\nüßπ Vols netejar els fitxers temporals? (s/n): ")
            if response.lower() in ['s', 'y', 'yes', 's√≠']:
                cleanup()
        else:
            print("\n‚ùå CONSTRUCCI√ì FALLIDA")
            print("=" * 50)
            print("Revisa els errors anteriors i torna-ho a intentar")
            
    except KeyboardInterrupt:
        print("\nüëã Construcci√≥ interrompuda per l'usuari")
    except Exception as e:
        print(f"\n‚ùå Error inesperat: {e}")

if __name__ == "__main__":
    main()
